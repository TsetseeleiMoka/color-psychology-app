# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LObEPL3P1uGzy6c5HoIzMUX6okxKbfKZ
"""

import streamlit as st
import pandas as pd
from PIL import Image
import os

# Load data from data folder
@st.cache_data
def load_data():
    return pd.read_csv("data/color_psychology_data.csv")

df = load_data()

st.title("üé® Color Psychology Insights")

# Unique colors from your dataframe
colors = df['color'].unique()

# Color selector
selected_color = st.selectbox("Choose a color:", options=sorted(colors))

# Filter dataframe for selected color
color_df = df[df['color'] == selected_color]

st.header(f"Insights for {selected_color.capitalize()}")

# Display emotions and sentiments
st.subheader("Emotions and Sentiments")
for _, row in color_df.iterrows():
    st.markdown(f"- **{row['emotion_text'].capitalize()}** ({row['tone']}, {row['sentiment']})")

# Display wordcloud image for the selected color
wc_folder = "wordclouds"
wc_path = os.path.join(wc_folder, f"{selected_color}.png")

if os.path.exists(wc_path):
    st.image(wc_path, caption=f"Wordcloud for {selected_color}", use_column_width=True)
else:
    st.info("Wordcloud image not found for this color.")

# Brand & Industry Applications
st.header("üè¢ Brand & Industry Applications")
business_type = st.selectbox(
    "Select a business type to see recommended colors:",
    options=["Tech", "Luxury", "Wellness"]
)

# Example recommendations (you can expand this dictionary)
business_colors = {
    "Tech": ["blue", "silver", "black"],
    "Luxury": ["gold", "black", "purple"],
    "Wellness": ["green", "turquoise", "white"],
}

st.markdown(f"Recommended colors for **{business_type}** business:")
for c in business_colors.get(business_type, []):
    st.markdown(f"- {c.capitalize()}")

# Personalized Recommendations
st.header("‚ú® Personalized Recommendations")

goal = st.text_input("Enter your goal (e.g., 'I want to improve focus'):")

energy_relaxation = st.slider("Refine your choice:", 0, 100, 50, help="Energy (0) vs Relaxation (100)")

if goal:
    st.markdown(f"### Colors to support: *{goal}*")
    # Simple logic example: if slider < 50 suggest warm colors else cool colors
    if energy_relaxation < 50:
        recommended = ["red", "orange", "magenta"]
    else:
        recommended = ["blue", "green", "turquoise"]
    st.markdown(", ".join([c.capitalize() for c in recommended]))
    # Show some supporting insights for each recommended color
    for c in recommended:
        c_df = df[df['color'] == c]
        if not c_df.empty:
            st.markdown(f"**{c.capitalize()}**:")
            emotions = ", ".join(c_df['emotion_text'].unique())
            st.markdown(f"Emotions: {emotions}")
            tones = ", ".join(c_df['tone'].unique())
            sentiments = ", ".join(c_df['sentiment'].unique())
            st.markdown(f"Tone: {tones} | Sentiment: {sentiments}")
        else:
            st.markdown(f"No data for {c.capitalize()}.")