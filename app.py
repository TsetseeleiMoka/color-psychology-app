# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LObEPL3P1uGzy6c5HoIzMUX6okxKbfKZ
"""

import streamlit as st
import pandas as pd
import plotly.graph_objs as go

st.set_page_config(page_title="üé® Colour Psychology Explorer", layout="centered")

# --- Load data ---
@st.cache_data
def load_data():
    return pd.read_csv("color_psychology_data.csv")

df = load_data()

# --- Colour name mapping ---
hex_to_name = {
    '#FF0000': 'Red', '#FFA500': 'Orange', '#FF00FF': 'Magenta', '#000000': 'Black',
    '#4B0082': 'Indigo', '#800080': 'Purple', '#FFD700': 'Gold', '#FFC0CB': 'Pink',
    '#A52A2A': 'Brown', '#0000FF': 'Blue', '#C0C0C0': 'Silver', '#FFFF00': 'Yellow',
    '#008000': 'Green', '#40E0D0': 'Turquoise', '#FFFFFF': 'White', '#808080': 'Grey'
}

available_colours = list(hex_to_name.keys())

# --- Title ---
st.title("üé® Colour Psychology Explorer")
st.write("Explore emotional associations of colours and visualise their psychological impact.")
st.subheader("üé® Pick a Colour")

# Create clickable coloured boxes using HTML and form buttons
selected_colour = st.session_state.get("selected_colour", available_colours[0])

with st.form("colour_picker_form", clear_on_submit=False):
    cols = st.columns(8)
    for i, hex_col in enumerate(available_colours):
        with cols[i % 8]:
            st.markdown(
                f"""
                <button type="submit" name="color_choice" value="{hex_col}" style="
                    background-color: {hex_col};
                    border: 2px solid #00000033;
                    width: 40px;
                    height: 40px;
                    border-radius: 6px;
                    cursor: pointer;
                    margin: 2px;
                " title="{hex_col}"></button>
                """,
                unsafe_allow_html=True
            )

    submitted = st.form_submit_button("Confirm Colour")

    # Get which button was clicked
    color_choice = st.experimental_get_query_params().get("color_choice", [selected_colour])[0]
    if submitted and color_choice in available_colours:
        selected_colour = color_choice
        st.session_state.selected_colour = selected_colour

st.write(f"Selected colour: `{selected_colour}` ({hex_to_name[selected_colour]})")

st.markdown("---")

# --- Section: Top 5 Most Common Colours ---
with st.expander("üîç Top 5 Most Common Colours in Dataset", expanded=True):
    st.write("These are the top 5 colours that appear most frequently in the dataset.")

    colour_counts = df['hex'].value_counts().head(5)
    named_labels = [hex_to_name.get(hex_code, hex_code) for hex_code in colour_counts.index]

    fig_pie = go.Figure(data=[go.Pie(
        labels=named_labels,
        values=colour_counts.values,
        marker=dict(colors=colour_counts.index),
        hoverinfo='label+percent',
        textinfo='label+value'
    )])

    st.plotly_chart(fig_pie, use_container_width=True)
    st.markdown("Hover over the chart segments to see percentages.")

st.markdown("---")

# --- Section: Word Cloud ---
with st.expander("‚òÅÔ∏è Emotional Word Cloud", expanded=False):
    st.write("Visual representation of emotional words associated with the selected colour.")
    try:
        st.image(f"wordclouds/{selected_colour}.png", caption=f"Word cloud for {hex_to_name[selected_colour]}")
    except FileNotFoundError:
        st.write("Word cloud image not found for this colour.")

st.markdown("---")

# --- Section: About ---
with st.expander("‚ÑπÔ∏è About This Explorer", expanded=False):
    st.write(
        """
        This tool helps you explore how different colours are psychologically and emotionally perceived.
        Select a colour to discover its top associated emotions and see visual word clouds representing these associations.
        """
    )

st.markdown("---")

# --- Section: Raw Data ---
with st.expander("üßæ Show Raw Dataset"):
    st.markdown("Preview the raw dataset used for this dashboard.")
    st.dataframe(df)

# --- Footer ---
st.markdown("---")
st.caption("Made with üíô by Moka")