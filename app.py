# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LObEPL3P1uGzy6c5HoIzMUX6okxKbfKZ
"""

import streamlit as st
import pandas as pd
import plotly.graph_objs as go

st.set_page_config(page_title="üé® Colour Psychology Explorer", layout="centered")

# --- Load data ---
@st.cache_data
def load_data():
    return pd.read_csv("color_psychology_data.csv")

df = load_data()

# List of valid hex colours from your dataset
available_colours = [
    '#FF0000', '#FFA500', '#FF00FF', '#000000', '#4B0082', '#800080',
    '#FFD700', '#FFC0CB', '#A52A2A', '#0000FF', '#C0C0C0', '#FFFF00',
    '#008000', '#40E0D0', '#FFFFFF', '#808080'
]

# --- Initialize selected colour from query params or default ---
if "color_choice" in st.experimental_get_query_params():
    selected_colour = st.experimental_get_query_params()["color_choice"][0]
    if selected_colour not in available_colours:
        selected_colour = available_colours[0]
else:
    selected_colour = available_colours[0]

if "selected_colour" not in st.session_state:
    st.session_state.selected_colour = selected_colour

st.title("üé® Colour Psychology Explorer")
st.write("Explore emotional associations of colours and visualise their psychological impact.")

st.subheader("üé® Pick a Colour")

cols = st.columns(8)
for i, hex_col in enumerate(available_colours):
    with cols[i % 8]:
        if st.button(" ", key=hex_col, help=hex_col):
            st.session_state.selected_colour = hex_col
            st.experimental_set_query_params(color_choice=hex_col)
        border_style = "2px solid yellow" if st.session_state.selected_colour == hex_col else "1px solid #000"
        st.markdown(
            f"<div style='width: 30px; height: 30px; background-color: {hex_col}; "
            f"border: {border_style}; border-radius: 5px; margin-top: -35px;'></div>",
            unsafe_allow_html=True
        )

st.write(f"Selected colour: `{st.session_state.selected_colour}`")
st.markdown("---")

# --- Section: Top 5 Most Common Emotions Associated With Selected Colour ---
with st.expander("üîç Top 5 Most Common Emotions Associated With This Colour", expanded=True):
    st.write("Here are the top 5 emotions most commonly linked to your chosen colour.")

    filtered = df[df['color'] == st.session_state.selected_colour]
    emotion_counts = filtered['emotion'].value_counts().head(5)

    rainbow_palette = ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF']
    fig_pie = go.Figure(data=[go.Pie(
        labels=emotion_counts.index,
        values=emotion_counts.values,
        marker=dict(colors=rainbow_palette[:len(emotion_counts)]),
        hoverinfo='label+percent',
        textinfo='label+value'
    )])

    st.plotly_chart(fig_pie, use_container_width=True)
    st.markdown("Hover over the chart segments to see percentages.")

st.markdown("---")

# --- Section: Word Cloud (static for now) ---
with st.expander("‚òÅÔ∏è Emotional Word Cloud", expanded=False):
    st.write("Visual representation of emotional words associated with the selected colour.")
    try:
        st.image(f"wordclouds/{st.session_state.selected_colour}.png", caption=f"Word cloud for {st.session_state.selected_colour}")
    except FileNotFoundError:
        st.write("Word cloud image not found for this colour.")

st.markdown("---")

# --- Section: Additional Info ---
with st.expander("‚ÑπÔ∏è About This Explorer", expanded=False):
    st.write(
        """
        This tool helps you explore how different colours are psychologically and emotionally perceived.
        Select a colour to discover its top associated emotions and see visual word clouds representing these associations.
        """
    )

st.markdown("---")

# --- Section: Raw Data (optional) ---
with st.expander("üßæ Show Raw Dataset"):
    st.markdown("Preview the raw dataset used for this dashboard.")
    st.dataframe(df)

st.markdown("---")
st.caption("Made with üíô by Moka")