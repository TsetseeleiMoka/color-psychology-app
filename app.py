# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LObEPL3P1uGzy6c5HoIzMUX6okxKbfKZ
"""

import streamlit as st
import pandas as pd
import plotly.graph_objs as go
import os

# --- Page Configuration ---
st.set_page_config(page_title="üé® Colour Psychology Explorer", layout="centered")

# --- Load Data ---
@st.cache_data
def load_data():
    return pd.read_csv("color_psychology_data.csv")

df = load_data()

# --- Colour Mapping ---
hex_to_name = {
    '#FF0000': 'Red', '#FFA500': 'Orange', '#FF00FF': 'Magenta', '#000000': 'Black',
    '#4B0082': 'Indigo', '#800080': 'Purple', '#FFD700': 'Gold', '#FFC0CB': 'Pink',
    '#A52A2A': 'Brown', '#0000FF': 'Blue', '#C0C0C0': 'Silver', '#FFFF00': 'Yellow',
    '#008000': 'Green', '#40E0D0': 'Turquoise', '#FFFFFF': 'White', '#808080': 'Grey'
}

# Use your dataset's 'color' and 'hex' columns
colors = df['color'].tolist()
hex_codes = df['hex'].tolist()

# --- Initialize State ---
if "selected_colour" not in st.session_state:
    st.session_state.selected_colour = None

# --- Title ---
st.title("üé® Colour Psychology Explorer")
st.write("Explore emotional associations of colours and visualise their psychological impact.")
st.subheader("Pick a Colour!")

# --- Colour Picker Buttons ---
cols = st.columns(len(colors))

for i, (name, hex_code) in enumerate(zip(colors, hex_codes)):
    is_selected = (st.session_state.selected_colour == name)
    box_style = (
        f"background-color: {hex_code};"
        "border-radius: 8px;"
        "height: 50px;"
        "width: 50px;"
        "border: 3px solid "
        + ("#000000" if is_selected else "#ffffff00") + ";"
        "cursor: pointer;"
    )

    if cols[i].button(name, key=name, help=f"Select {name}"):
        st.session_state.selected_colour = name

    cols[i].markdown(f"<div style='{box_style}'></div>", unsafe_allow_html=True)

# --- Selected Colour Display ---
if st.session_state.selected_colour:
    st.write(f"üéØ Selected Colour: **{st.session_state.selected_colour}**")

    # --- Examples in Use ---
    st.markdown("---")
    st.subheader(f"üß™ Examples of {st.session_state.selected_colour} in Use")

    st.markdown("### üíº Marketing")
    st.write("wip")

    st.markdown("### üè° Interior Design")
    st.write("wip")

    st.markdown("### üß† Psychology")
    st.write("wip")

    # --- Word Cloud Section ---
    st.markdown("---")
    st.subheader("‚òÅÔ∏è Emotional Word Cloud")
    with st.expander("Visual representation of emotional words associated with the selected colour.", expanded=True):
        # Match selected colour to hex and image file
        selected_name = st.session_state.selected_colour
        try:
            selected_hex = df[df['color'] == selected_name]['hex'].iloc[0]
            colour_name = hex_to_name.get(selected_hex, selected_name).lower()
            img_path = f"wordclouds/{colour_name}.png"

            if os.path.isfile(img_path):
                st.image(img_path, caption=f"Word cloud for {selected_name}")
            else:
                st.write("‚ö†Ô∏è Word cloud image not found for this colour.")
        except:
            st.write("‚ö†Ô∏è Error loading word cloud.")

# --- Top 5 Most Common Colours ---
st.markdown("---")
st.subheader("üîç Top 5 Most Common Colours in Dataset")
st.write("These are the top 5 colours that appear most frequently in the dataset.")

colour_counts = df['hex'].value_counts().head(5)
named_labels = [hex_to_name.get(hex_code, hex_code) for hex_code in colour_counts.index]

fig_pie = go.Figure(data=[go.Pie(
    labels=named_labels,
    values=colour_counts.values,
    marker=dict(colors=colour_counts.index),
    hoverinfo='label+percent',
    textinfo='label+value'
)])

st.plotly_chart(fig_pie, use_container_width=True)
st.markdown("Hover over the chart segments to see percentages.")

# --- Raw Dataset ---
st.markdown("---")
with st.expander("üßæ Show Raw Dataset"):
    st.markdown("Preview the raw dataset used for this dashboard.")
    st.dataframe(df)

# --- About Section ---
st.markdown("---")
with st.expander("‚ÑπÔ∏è About This Explorer", expanded=False):
    st.write(
        """
        This tool helps you explore how different colours are psychologically and emotionally perceived.
        Select a colour to discover its top associated emotions and see visual word clouds representing these associations.
        """
    )

# --- Footer ---
st.markdown("---")
st.caption("Made with üíô by Moka")