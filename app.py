# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LObEPL3P1uGzy6c5HoIzMUX6okxKbfKZ
"""

import streamlit as st
import pandas as pd

st.set_page_config(page_title="Colour Psychology App", layout="wide")

# Load Data
df = pd.read_csv('data/color-psychology.csv')

st.title("üé® Colour Psychology Explorer")
st.dataframe(df.head())

st.header("üé® Explore by Colour")

unique_colors = df['color'].unique()
selected_color = st.selectbox("Pick a colour:", sorted(unique_colors))

filtered = df[df['color'] == selected_color]

st.subheader(f"Emotions linked to {selected_color.capitalize()}")

for _, row in filtered.iterrows():
    st.markdown(f"""
    <div style='padding:10px; border:1px solid #ccc; margin-bottom:10px; border-radius:5px'>
        <b>Emotion:</b> {row['emotion_key']}<br>
        <b>Importance:</b> {row['importance']}<br>
        <b>Tone:</b> {row['tone']}<br>
        <b>Sentiment:</b> {row['sentiment']}
    </div>
    """, unsafe_allow_html=True)

import matplotlib.pyplot as plt
import seaborn as sns

st.header("üìä Visual Insights")

chart_type = st.radio("Choose a chart:", ["Emotion Frequency", "Sentiment Distribution", "Tone Heatmap"])

if chart_type == "Emotion Frequency":
    top_emotions = df['emotion_key'].value_counts().head(10)
    st.bar_chart(top_emotions)

elif chart_type == "Sentiment Distribution":
    st.write("Overall sentiment for all colours")
    sentiment_counts = df['sentiment'].value_counts()
    st.bar_chart(sentiment_counts)

elif chart_type == "Tone Heatmap":
    tone_color = pd.crosstab(df['color'], df['tone'])
    fig, ax = plt.subplots()
    sns.heatmap(tone_color, annot=True, cmap="YlGnBu", ax=ax)
    st.pyplot(fig)

industry_mapping = {
    "Tech": ["blue", "black"],
    "Luxury": ["black", "gold", "purple"],
    "Wellness": ["green", "white", "pink"],
    "Education": ["blue", "yellow"],
}

st.header("üè¢ Industry Colours")

industry = st.selectbox("Choose an industry", list(industry_mapping.keys()))

industry_colors = industry_mapping[industry]
filtered_industry = df[df['color'].isin(industry_colors)]

st.write(f"Colours commonly used in {industry}:")

for color in industry_colors:
    st.markdown(f"<div style='width:60px;height:30px;background:{color};border:1px solid black'></div>", unsafe_allow_html=True)

# Show top emotions per colour
for color in industry_colors:
    subset = filtered_industry[filtered_industry['color'] == color]
    st.markdown(f"### {color.capitalize()}")
    st.dataframe(subset[['emotion_key', 'tone', 'sentiment']])

st.header("‚ú® Personal Colour Advice")

goal_to_emotions = {
    "Focus": ["clarity", "concentration"],
    "Calm": ["peace", "relaxation"],
    "Creativity": ["imagination", "joy"],
    "Confidence": ["power", "assertiveness"]
}

user_goal = st.selectbox("What‚Äôs your goal?", list(goal_to_emotions.keys()))
matched_emotions = goal_to_emotions[user_goal]

recommendations = df[df['emotion_key'].isin(matched_emotions) | df['emotion_text'].isin(matched_emotions)]

st.write(f"Recommended colours for **{user_goal}**:")
for _, row in recommendations.iterrows():
    st.markdown(f"""
    <div style='padding:10px; border-left:5px solid {row["color"]}; margin-bottom:10px'>
        <b>Colour:</b> {row['color']}<br>
        <b>Emotion:</b> {row['emotion_key']}<br>
        <b>Sentiment:</b> {row['sentiment']} | <b>Tone:</b> {row['tone']}
    </div>
    """, unsafe_allow_html=True)